imports:
    - { resource: services/tactician.yml }
    - { resource: services/question.yml }
    - { resource: services/answer.yml }

# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: true

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Brainly\Application\:
        resource: '../../src/Application/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Application/Command/*'

    Brainly\UserInterface\:
        resource: '../../src/UserInterface/*'

    Brainly\Infrastructure\:
        resource: '../../src/Infrastructure/*'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    Brainly\UserInterface\Symfony\AppBundle\Controller\:
        resource: '../../src/UserInterface/Symfony/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    questions.repository:
        class: Doctrine\ORM\EntityRepository
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - Brainly\Domain\Question
        public: true

#    object_normalizer:
#        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
#        tags:
#            - { name: serializer.normalizer }
